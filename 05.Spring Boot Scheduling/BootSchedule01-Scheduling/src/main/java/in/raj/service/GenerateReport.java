package in.raj.service;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class GenerateReport {

    /*@Scheduled(initialDelay = 2000, fixedDelay = 1000)
    *//**
     * ‚öôÔ∏è 1. initialDelay ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?
     * ‚û°Ô∏è initialDelay ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø method ‡§™‡§π‡§≤‡•Ä ‡§¨‡§æ‡§∞ ‡§ö‡§≤‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¶‡•á‡§∞ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§ï‡§∞‡•á‡•§
     * initialDelay = 2000
     * ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‚Äî
     *
     * ‡§ú‡§¨ Spring Boot ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® start ‡§π‡•ã‡§ó‡•Ä, ‡§§‡•ã ‡§Ø‡§π method 2 ‡§∏‡•á‡§ï‡§Ç‡§° (2000 milliseconds) ‡§¨‡§æ‡§¶ ‡§™‡§π‡§≤‡•Ä ‡§¨‡§æ‡§∞ ‡§ö‡§≤‡•á‡§ó‡§æ‡•§
     *
     * üïí ‡§Ø‡§æ‡§®‡•Ä, ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•ã‡§§‡•á ‡§π‡•Ä ‡§Ø‡•á ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡•á‡§ó‡§æ,
     * ‡§™‡§π‡§≤‡•á 2 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§∞‡•Å‡§ï‡•á‡§ó‡§æ, ‡§´‡§ø‡§∞ execute ‡§π‡•ã‡§ó‡§æ‡•§
     *//*
    *//**
     * üîÅ Parameter 2: fixedDelay = 1000
     * üëâ ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‚Äî
     * ‡§Ø‡§π method ‡§π‡§∞ ‡§¨‡§æ‡§∞ execute ‡§π‡•ã‡§®‡•á ‡§ï‡•á 1 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§¨‡§æ‡§¶ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ö‡§≤‡•á‡§ó‡§æ‡•§
     * *//*
    public void generateReport1() {
        System.out.println("GenerateReport.generateReport()-- Generating report 1..."+new Date()+Thread.currentThread());
    }*/
   /* @Scheduled(fixedDelay = 3000)
    public void generateReport2() {
        System.out.println("GenerateReport.generateReport()-- Generating report 2..."+new Date()+Thread.currentThread());
    }*/
    /*@Scheduled(fixedDelay = 3000)
    public void generateReport3() {
        System.out.println("GenerateReport.generateReport()-- Generating report 3..."+new Date()+" Start");
        try{
            Thread.sleep(5000);
        }catch (Exception e){
            e.printStackTrace();
        }
        System.out.println("End of generating Report method 3..."+new Date()+" End");
    }*/
    /*@Scheduled(fixedRate = 10000)
    public void generateReport4() {
        System.out.println("GenerateReport.generateReport()-- Generating report 3..."+new Date()+" Start");
        try{
            Thread.sleep(5000);
        }catch (Exception e){
            e.printStackTrace();
        }
        System.out.println("End of generating Report method 3..."+new Date()+" End");
    }*/
    /*@Scheduled(fixedRate = 10000)
    public void generateReport5() {
        System.out.println("GenerateReport.generateReport()-- Generating report 3..."+new Date()+" Start");
        try{
            Thread.sleep(5000);
        }catch (Exception e){
            e.printStackTrace();
        }
        System.out.println("End of generating Report method 3..."+new Date()+" End");
    }*/
    @Scheduled(initialDelay = 2000,fixedDelay = 3000)
    public   void  showReport1() {
        System.out.println("report1 on(start) ::"+new Date()+"----"+Thread.currentThread());
        System.out.println("Thread(task1) name ::"+Thread.currentThread().getName());
        System.out.println("Thread(task1) hashcode ::"+Thread.currentThread().hashCode());
        System.out.println("report1 on(end) ::"+new Date()+"----"+Thread.currentThread());
    }
    @Scheduled(initialDelay = 2000,fixedDelay = 5000)
    public   void  showReport2() {
        System.out.println("report2 on(start) ::"+new Date()+"----"+Thread.currentThread());
        System.out.println("Thread(task2) name ::"+Thread.currentThread().getName());
        System.out.println("Thread(task2) hashcode ::"+Thread.currentThread().hashCode());
        System.out.println("report2 on(end) ::"+new Date()+"----"+Thread.currentThread());
    }

}
