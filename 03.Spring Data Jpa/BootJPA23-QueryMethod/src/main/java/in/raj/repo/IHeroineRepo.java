package in.raj.repo;

import in.raj.entity.Heroines;
import jakarta.transaction.Transactional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface IHeroineRepo extends JpaRepository<Heroines, Integer> {
    //    @Query("select actoress from Heroines as actoress")
//    @Query("from Heroines")
    @Query("from Heroines actoress")
    public List<Heroines> getAllHeroines();
    /*@Query(" from Heroines where fees between :start and :end ")
	public Iterable<Heroines>  getHeroinesByFeesAmountRange(@Param("start") float startAmount,@Param("end") float endAmount);*/

    //@Query(" from Heroines where fees between :startFees and :endFees ")
    //@Query(" from Heroines as actress where actress.fees between :startFees and :endFees ")
    @Query("from Heroines where fees between ?1 and ?2")
    public Iterable<Heroines> getHeroinesByFeesRange1(Integer startFees, Integer endFees);

    @Query("from Heroines where fees between ?1 and ?2")
    public List<Heroines> getHeroinesByFeesRange(Integer startFees, Integer endFees);

    @Query("from Heroines where fees between ?1 and ?2")
    public Iterable<Heroines> getHeroinesByFeesRange2(Integer startFees, Integer endFees);

    @Query("select id,name,fees from Heroines where name in(:name1,:name2)")
//TODO:- scalar -projection (selecting specific multiple col values)
    public List<Object[]> getHeroinesData(String name1, String name2);

    @Query("select name,description from Heroines where name like :initChar")
//TODO:- scalar -projection (selecting specific single col values)
    public List<String> getHeroinesNamesUsingFchar(String initChar);

    @Query("from Heroines where name=:name")
    public Heroines getHeroinesDescription(String name);

    @Query("select name,fees from Heroines where  name=:name")
    public Object getHeroinesDataUsingName(String name);

    @Query("select name from Heroines  where fees=:fees")
    public String fetchHeroinesNameUsingFees(Integer fees);

    @Query("select count(distinct fees) from Heroines ")
    public int fetchAllHeroinesCountUsingFees();

    @Query("select count(*), max(fees),min(fees),avg(fees),sum(fees) from Heroines ")
    public Object fetchHeroinesAggregateData();

    //    TODO:- Non Select Operation JPQL QUERY
    @Query("update Heroines set fees=fees+(fees*:percentage/100.00) where name in(:name1,:name2)")
    @Transactional
    @Modifying
    /*TODO:-
    *   | Annotation       | ‡§ï‡§æ‡§Æ                                   | ‡§Ö‡§ó‡§∞ ‡§® ‡§≤‡§ó‡§æ‡§è‡§Å ‡§§‡•ã                             |
        | ---------------- | ------------------------------------- | ------------------------------------------ |
        | `@Modifying`     | ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡§π query ‡§°‡§æ‡§ü‡§æ ‡§ï‡•ã ‡§¨‡§¶‡§≤‡§§‡•Ä ‡§π‡•à | Spring ‡§á‡§∏‡•á SELECT ‡§Æ‡§æ‡§®‡•á‡§ó‡§æ ‡§î‡§∞ Error ‡§¶‡•á‡§ó‡§æ     |
        | `@Transactional` | ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§¨‡§¶‡§≤‡§æ‡§µ commit ‡§π‡•ã‡§Ç | Update ‡§π‡•ã‡§ó‡§æ ‡§™‡§∞ Database ‡§Æ‡•á‡§Ç Save ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ |
    * */

    /*TODO:-
    *  üß© 1Ô∏è‚É£ ‡§Ö‡§ó‡§∞ @Modifying ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ó‡§æ‡§è‡§Å:
        ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ @Modifying ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ó‡§æ‡§§‡•á ‡§π‡•à‡§Ç,
        ‡§§‡•ã Spring Data JPA ‡§Æ‡§æ‡§®‡•á‡§ó‡§æ ‡§ï‡§ø ‡§Ø‡§π SELECT query ‡§π‡•à‡•§
        üëâ ‡§®‡§§‡•Ä‡§ú‡§æ:
        ‡§Ø‡§π update ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
        ‡§∞‡§®‡§ü‡§æ‡§á‡§Æ ‡§™‡§∞ Exception ‡§¶‡•á‡§ó‡§æ ‡§ú‡•à‡§∏‡•á:
        org.springframework.dao.InvalidDataAccessApiUsageException:
        Modifying queries can only use void or int/Integer as return type!
        ‡§Ø‡§æ
        QueryExecutionRequestException: Update queries cannot be typed
        ‡§Æ‡§§‡§≤‡§¨ ‚Äî Spring ‡§¨‡•ã‡§≤‡•á‡§ó‡§æ, ‚Äú‡§§‡•Å‡§Æ update ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•ã, ‡§≤‡•á‡§ï‡§ø‡§® ‡§¨‡§§‡§æ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø ‡§Ø‡•á modifying query ‡§π‡•à‡•§‚Äù*/
    /*TODO:-
    *  üß© 2Ô∏è‚É£ ‡§Ö‡§ó‡§∞ @Transactional ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ó‡§æ‡§è‡§Å:
        Update, Delete, ‡§Ø‡§æ Insert queries ‡§ï‡•á ‡§≤‡§ø‡§è transaction ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
        ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ @Transactional ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ó‡§æ‡§è‡§Å‡§ó‡•á, ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç change commit ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ‡•§
        ‡§Ø‡§æ‡§®‡•Ä query ‡§ö‡§≤‡•á‡§ó‡•Ä ‡§™‡§∞ ‡§°‡•á‡§ü‡§æ update ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ‡•§*/
    public int updateHeroinesFeesByName(double percentage, String name1, String name2);

    @Query("delete from Heroines where id between :start and :end")
    @Transactional
    @Modifying
    public int deleteHeroinesBetweenId(Integer start, Integer end);
}